name: Mono on Ubuntu Latest

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        version: [ 1.3, 1.4 ]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Pull repo
      uses: actions/checkout@master
      with:
        submodules: recursive
      
    - name: Setup build environment
      id: init
      run: |
        echo "##[set-output name=sha8;]$(echo ${GITHUB_SHA:0:8})"
        echo "##[set-output name=pwd;]$(pwd)"
        curl ${{ secrets.RIMWORLD_DLLS_PREFIX }}-${{ matrix.version }}.zip -o rimworld-dlls.zip
        mkdir -p GameDLLs/${{ matrix.version }}
        unzip rimworld-dlls.zip -d GameDlls/${{ matrix.version }}
        curl https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -o nuget.exe

      # Windows flavour
    - name: Remove Protobuf Source Link (via PowerShell)
      id: kill-sourcelink-ps
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        (Get-Content Dependencies\protobuf\csharp\src\Google.Protobuf\Google.Protobuf.csproj -Raw) -Replace '<PackageReference.+?Include="Microsoft.SourceLink.GitHub".+>', '' | Set-Content Dependencies\protobuf\csharp\src\Google.Protobuf\Google.Protobuf.csproj
      # Linux flavour
    - name: Remove Protobuf Source Link (via sed)
      id: kill-sourcelink-sed
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sed -i -Es "s/<PackageReference.+?Include=\"Microsoft.SourceLink.GitHub\".+>//g" Dependencies/protobuf/csharp/src/Google.Protobuf/Google.Protobuf.csproj

      # Windows only
    - name: Add msbuild to PATH
      if: ${{ matrix.os == 'windows-latest' }}
      uses: microsoft/setup-msbuild@v1.1

      # Windows flavour
    - name: Restore project via Nuget
      if: ${{ matrix.os == 'windows-latest' }}
      run: nuget.exe restore ./Phinix.sln
      # Linux flavour
    - name: Restore project via Nuget
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: mono nuget.exe restore ./Phinix.sln

    - name: Build Phinix
      run: "msbuild /restore /property:Configuration=\"Release ${{ matrix.version }}\" ./Phinix.sln"

      # Windows flavour
    - name: Prepare artifacts
      if: ${{ matrix.os == 'windows-latest' }}
      id: artifacts-ps
      run: |
        Remove-Item .\Server\bin\Release\*.pdb
        Remove-Item -Recurse .\Client\Source\
        Move-Item -Path .\Client\ -Destination .\PhinixClient\
        Move-Item -Path .\Server\bin\Release\ .\PhinixServer\
      # Linux flavour
    - name: Prepare artifacts
      if: ${{ matrix.os == 'ubuntu-latest' }}
      id: artifacts-sh
      run: |
        rm ./Server/bin/Release/*.pdb
        rm -rf ./Client/Source/
        mv ./Client/ ./PhinixClient/
        mv ./Server/bin/Release/ ./PhinixServer/

    - name: Upload client artifact
      uses: actions/upload-artifact@v1
      with:
        name: PhinixClient-${{ steps.init.outputs.sha8 }}-${{ matrix.version }}-${{ matrix.os }}
        path: ${{ format('{0}/{1}', steps.init.outputs.pwd, 'PhinixClient') }}
          
    - name: Upload server artifact
      uses: actions/upload-artifact@v1
      with:
        name: PhinixServer-${{ steps.init.outputs.sha8 }}-${{ matrix.version }}-${{ matrix.os }}
        path: ${{ format('{0}/{1}', steps.init.outputs.pwd, 'PhinixServer') }}
